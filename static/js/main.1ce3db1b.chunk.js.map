{"version":3,"sources":["Components/shared/images/tyrion.png","Components/shared/form.js","Components/shared/inputform.js","Components/shared/badge.js","Components/utils.js","Components/shared/styles.js","Components/renderKingdoms.js","Components/kingdoms.js","Components/kingdomSearch.js","Components/shared/list.js","Components/Kingdom.js","Components/shared/logo.js","Components/intro.js","index.js"],"names":["module","exports","Input","styled","input","Button","button","TextArea","textarea","Container","div","Form","InputForm","inputVal","onChange","onSubmit","buttonText","value","onClick","AddReview","style","display","to","margin","className","marginRight","Badge","span","timeDifferenceForDate","date","current","previous","elapsed","milliSecondsPerMinute","Math","round","milliSecondsPerHour","milliSecondsPerDay","timeDifference","Date","getTime","getAverageRating","ratings","totalRatings","i","length","rating","average","toFixed","Number","Styles","container","height","textAlign","fullscreen","position","top","left","right","bottom","intro","flexDirection","alignItems","justifyContent","padding","backgroundColor","box","width","kingdom","RenderKingdoms","kingdoms","color","map","id","name","region","sigil","reviews","Grid","item","xs","sm","md","key","Paper","elevation","widgetDimensions","widgetSpacings","paddingTop","Widget","widgetRatedColor","widgetDimension","src","alt","KINGDOMS","gql","Kingdoms","newKingdoms","useQuery","loading","error","data","message","Box","direction","justify","spacing","Great_Houses","SEARCH","KingdomSearch","useState","setInputVal","buttonDisplay","setButtonDisplay","errorMessage","setErrorMessage","useLazyQuery","search","useEffect","window","scrollTo","e","target","variables","match","hidden","List","ul","ListItem","li","KINGDOM","ADD_REVIEW","KingdomLoader","params","userRating","setUserRating","useSubscription","useMutation","addReview","Great_Houses_by_pk","averageRating","marginTop","widgetRatedColors","changeRating","body","review","created_at","LogoText","h1","Logo","image","require","Intro","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","splitLink","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","link","App","ApolloProvider","path","component","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ce3db1b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tyrion.a196bcb6.png\";","import styled from '@emotion/styled';\n\nexport const Input = styled.input`\n  height: calc(1.5em + 1rem + 2px);\n  padding: 0.5rem 1rem;\n  margin: 2rem 0;\n  font-size: 2.4rem;\n  line-height: 1.5;\n  border-radius: 0.3rem;\n  display: block;\n  width: 100%;\n  color: #495057;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #ced4da;\n`;\n\nexport const Button = styled.button`\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n  text-align: center;\n  vertical-align: middle;\n  border: 1px solid transparent;\n  padding: 0.5rem 1rem;\n  font-size: 2rem;\n  line-height: 1.5;\n  height: calc(1.5em + 1rem + 8px);\n  border-radius: 0.25rem;\n  user-select: none;\n  &:hover {\n    cursor: pointer;\n    background-color: #0069d9;\n    border-color: #0062cc;\n  }\n  &:active {\n    background-color: #0062cc;\n    border-color: #005cbf;\n  }\n`;\n\nexport const TextArea = styled.textarea`\n\theight: 175px;\t\n  resize: none; \n  overflow: auto;\n  width: 500px;\t\n\tborder: none;\n\tborder-radius: 20px;\n\toutline: none;\n  padding: 10px;\n\tfont-size: 1em;\n\tcolor: #676767;\n\ttransition: border 0.5s;\n\t-webkit-transition: border 0.5s;\n\t-moz-transition: border 0.5s;\n\t-o-transition: border 0.5s;\t\n\t-webkit-box-sizing:border-box;\n\t-moz-box-sizing:border-box;\n\tbox-sizing:border-box;\n`\n\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport {Input, Button, TextArea} from './form';\nimport { Link } from 'react-router-dom';\n\nconst Container = styled.div`\n    display: flex;\n    margin: 0 auto;\n    max-width:500px;\n    align-items: center;\n    > button {\n        margin-left: 1rem;\n    }\n`;\n\nconst Form = styled.div`\n    display: flex;\n    margin: 0 auto;\n    max-width:500px;\n    align-items: center;\n    > button {\n        margin-left: 1rem;\n    }\n`;\n\nexport const InputForm = ({ inputVal, onChange, onSubmit, buttonText}) => {\n    return (\n      <Container>\n        <Input value={inputVal} onChange={onChange} />\n        <Button onClick={onSubmit}>{buttonText || \"Search\"}</Button>\n      </Container>\n    );\n  };\n\nexport const AddReview = ({ inputVal, onChange, onSubmit, buttonText}) => {\n    return (\n      <Form style={{display:'block'}}>\n        <TextArea  value={inputVal} onChange={onChange}/>\n        <Link to='/'><Button style={{ margin: '25px 0' }}><i className=\"fas fa-arrow-left\" style={{ marginRight: '2px' }}></i>Go Back</Button></Link>\n        <Button onClick={onSubmit}>{buttonText || \"Search\"}</Button>\n      </Form>\n    );\n  };\n\n","import styled from \"@emotion/styled\";\n\nexport const Badge = styled.span`\n  display: inline-block;\n  padding: 0.5rem 1rem;\n  font-size: 1.6rem;\n  font-weight: 600;\n  line-height: 1;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  border-radius: 0.25rem;\n  color: #fff;\n  background-color: #17a2b8;\n  margin: 0 1rem;\n`;\n\n\n\n\n","function timeDifference(current, previous) {\n    const milliSecondsPerMinute = 60 * 1000\n    const milliSecondsPerHour = milliSecondsPerMinute * 60\n    const milliSecondsPerDay = milliSecondsPerHour * 24\n    const milliSecondsPerMonth = milliSecondsPerDay * 30\n    const milliSecondsPerYear = milliSecondsPerDay * 365\n  \n    const elapsed = current - previous\n  \n    if (elapsed < milliSecondsPerMinute / 3) {\n      return 'just now'\n    }\n  \n    if (elapsed < milliSecondsPerMinute) {\n      return 'less than 1 min ago'\n    } else if (elapsed < milliSecondsPerHour) {\n      return Math.round(elapsed / milliSecondsPerMinute) + ' min ago'\n    } else if (elapsed < milliSecondsPerDay) {\n      return Math.round(elapsed / milliSecondsPerHour) + ' h ago'\n    } else if (elapsed < milliSecondsPerMonth) {\n      return Math.round(elapsed / milliSecondsPerDay) + ' days ago'\n    } else if (elapsed < milliSecondsPerYear) {\n      return Math.round(elapsed / milliSecondsPerMonth) + ' mo ago'\n    } else {\n      return Math.round(elapsed / milliSecondsPerYear) + ' years ago'\n    }\n  }\n  \nexport function timeDifferenceForDate(date) {\n    const now = new Date().getTime()\n    const updated = new Date(date).getTime()\n    return timeDifference(now, updated)\n};\n\nexport function getAverageRating(ratings){\n    let totalRatings = 0;\n    for (let i =0; i < ratings.length; i++){\n        totalRatings += ratings[i].rating;\n    }\n    let average = (totalRatings / ratings.length).toFixed(2)\n    return Number(average);\n};\n","const Styles = {\n    container:{\n        height:'100%',\n        textAlign:'center'\n    },\n    fullscreen:{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right:0,\n        bottom: 0,\n        margin: 0\n    },\n    intro:{\n        display:'flex', \n        flexDirection:'row', \n        alignItems:'center', \n        justifyContent:'center', \n        padding:'10px', \n        backgroundColor:'#aaf0d1',\n        textAlign:'center'\n    },\n    box:{\n        width:'215px', \n        height:'225px', \n        display:'flex', \n        justifyContent:'center', \n        alignItems:'center', \n        textAlign:'center', \n        padding:'15px',\n        margin:'7px auto'\n    },\n    kingdom:{\n        display:'flex', \n        justifyContent:'center', \n        textAlign:'center',\n        backgroundColor:'#00203FFF',\n        width:'100%'\n    }\n}\n\nexport default Styles;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Badge } from './shared/badge';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Ratings from 'react-ratings-declarative';\nimport { getAverageRating } from './utils';\nimport Styles from './shared/styles';\n\nconst { box } = Styles;\n\nfunction RenderKingdoms({kingdoms}){\n    \n    if (kingdoms.length < 1) return <div style={{color:'red'}}>No houses returned. Try again. <br />(hint: search by  letters in the great seven houses. Ex: st)</div>\n     // console.log(kingdoms[0].reviews[0].rating + kingdoms[0].reviews[0].rating )\n     //console.log(totalNum);\n     //add rating functionality to ratings component with jsx;\n     return (kingdoms.map(({ id, name, region, sigil, reviews }) => (\n\n         <Grid item xs={12} sm={6} md={4} key={id}>\n             <Paper elevation={3} style={box}>\n                 <Link to={`/kingdom/${id}`}>\n                     <Ratings\n                         rating={getAverageRating(reviews)}\n                         widgetDimensions=\"40px\"\n                         widgetSpacings=\"10px\"\n                         style={{paddingTop:'5px'}}\n                     >\n                         <Ratings.Widget widgetRatedColor=\"rebeccapurple\" widgetDimension='20px' />\n                         <Ratings.Widget widgetRatedColor=\"rebeccapurple\" widgetDimension='20px' />\n                         <Ratings.Widget widgetRatedColor=\"rebeccapurple\" widgetDimension='20px' />\n                         <Ratings.Widget widgetRatedColor=\"rebeccapurple\" widgetDimension='20px' />\n                         <Ratings.Widget widgetRatedColor=\"rebeccapurple\" widgetDimension='20px' />\n                     </Ratings>\n                     <p>\n                         <img src={sigil} alt={name} width='50px' height='50px' /> <br /> {name} <br /> <Badge>{region}</Badge>\n                     </p>\n                 </Link>\n             </Paper>\n         </Grid>\n     ))\n     )\n };\n\n export default RenderKingdoms;\n","import React from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport RenderKingdoms from './renderKingdoms';\n\nconst KINGDOMS = gql`\n    {\n        Great_Houses(order_by: {name: asc}){\n            id\n            name\n            region\n            sigil\n            reviews {\n                rating\n            }\n        }\n    }\n`;\n\nexport default function Kingdoms({ newKingdoms }) {\n    const { loading, error, data } = useQuery(KINGDOMS);\n    \n    if (loading) return <p style={{ color: 'white' }}><i className=\"fa fa-spinner fa-pulse fa-3x fa-fw\"></i>Loading...</p>;\n    if (error) return <p style={{ color: 'white' }}>Error: {error.message}</p>\n\n    return (\n        <Box>\n            <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={1}>\n                <RenderKingdoms kingdoms={newKingdoms || data.Great_Houses}/>\n            </Grid>\n        </Box>\n    )\n};\n","import React, { useState, useEffect } from 'react';\nimport { InputForm } from './shared/inputform';\nimport Kingdoms from './kingdoms';\nimport { useLazyQuery, gql } from '@apollo/client';\nimport { Button } from './shared/form';\n\nconst SEARCH = gql`\n    query Search($match: String){\n        Great_Houses(order_by: {name: asc}, where: {name: {_ilike: $match}}){\n            id,\n            name, \n            region,\n            sigil,\n            reviews {\n                rating\n            }\n        }\n    }\n`\n\nconst KingdomSearch = () => {\n\n    const [inputVal, setInputVal] = useState(\"\");\n    const [buttonDisplay, setButtonDisplay] = useState(true)\n    const [errorMessage, setErrorMessage] = useState('')\n    let [search, { loading, error, data }] = useLazyQuery(SEARCH);\n\n    useEffect(() => {\n        window.scrollTo(0, 0)\n    }, [])\n\n    if (loading) return <p style={{ color: 'white' }}>Loading...</p>\n    if (error) return <p style={{ color: 'white' }}>Error: {error.message}</p>\n\n    return (\n        <div>\n            <h2 style={{ color: 'white' }}>Search by one of the seven great kingdoms or click on one below <br /> to add a review and see what others are saying!</h2>\n            <InputForm\n                inputVal={inputVal}\n                onChange={(e) => {setInputVal(e.target.value)}}\n                onSubmit={ inputVal.length < 1 ? () => setErrorMessage('Error: You must at least type one letter to search by') \n                : () => { search({ variables: { match: `%${inputVal}%` } }); setButtonDisplay(false); setErrorMessage(\"\") }}/>\n            <p style={{color:'red'}}>{errorMessage}</p>\n            <Kingdoms newKingdoms={data ? data.Great_Houses : null} />\n            <Button style={{ margin: '25px 0'}}\n                hidden={buttonDisplay}\n                onClick={ \n                    () => { setInputVal(''); search(); setButtonDisplay(true)}}>\n                <i className=\"fas fa-arrow-left\" style={{ marginRight: '2px' }}></i>Reset Search\n            </Button>\n        </div>\n    )\n};\n\nexport default KingdomSearch;\n","import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\n  padding: 0;\n  margin: 0 auto;\n  max-width: 600px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ListItem = styled.li`\n  display: block;\n  padding: 3rem 5rem;\n  background-color: #fff;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n  border-top-width: 0;\n  &:first-of-type {\n    border-top-width: 1px;\n    border-top-left-radius: 0.25rem;\n    border-top-right-radius: 0.25rem;\n  }\n  &:last-of-type {\n    border-bottom-right-radius: 0.25rem;\n    border-bottom-left-radius: 0.25rem;\n  }\n}\n`;\n\nexport const ListItemWithLink = styled.li`\n  > a {\n    background-color: #fff;\n    &:hover {\n      color: #fff;\n      background-color: #bababa;\n      border-color: #bababa;\n      cursor: pointer;\n    }\n  }\n`;","import React, { useEffect, useState } from 'react';\nimport { useSubscription, useMutation, gql } from '@apollo/client';\nimport { List, ListItem } from './shared/list';\nimport { Badge } from './shared/badge';\nimport { AddReview } from './shared/inputform';\nimport { Link } from 'react-router-dom';\nimport { Button } from './shared/form';\nimport { timeDifferenceForDate } from './utils';\nimport Ratings from 'react-ratings-declarative';\nimport { getAverageRating } from './utils';\n\nconst KINGDOM = gql`\n    subscription Kingdom($id: uuid!) {\n        Great_Houses_by_pk(id: $id) {\n        id\n        name\n        region\n        reviews(order_by: {created_at: desc}) {\n            id\n            body\n            created_at\n            rating\n        }\n        sigil\n      }\n    }\n`\n\nconst ADD_REVIEW = gql`\nmutation MyMutation($body: String!, $id: uuid, $rating: Int) {\n    insert_reviews(objects: {body: $body, house_id: $id, rating:$rating}) {\n      affected_rows\n    }\n  }\n`;\n\nconst KingdomLoader = ({\n    //match prop comes from react router can get match prop with params\n    match: {\n        params: { id },\n    },\n}) => {\n\n    const [inputVal, setInputVal] = useState(\"\");\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [userRating, setUserRating] = useState(0);\n\n    useEffect(() => {\n        window.scrollTo(0, 0)\n    }, [])\n\n    const { loading, error, data } = useSubscription(KINGDOM, { variables: { id } });\n    const [addReview] = useMutation(ADD_REVIEW);\n\n    if (loading) return <p style={{ color: 'white' }}>Loading...</p>\n    if (error) return <p style={{ color: 'white' }}>Error: {error.message}</p>;\n\n    const { name, region, sigil, reviews } = data.Great_Houses_by_pk;\n    let averageRating = getAverageRating(reviews);\n\n    return (\n        <div>\n            <img src={sigil} alt={name} style={{ height: '150px', marginTop: '25px' }} />\n            <br />\n            <Ratings\n                rating={averageRating}\n                widgetDimensions=\"40px\"\n                widgetSpacings=\"15px\"\n            >\n                <Ratings.Widget widgetRatedColor=\"rebeccapurple\" widgetDimension='40px' />\n                <Ratings.Widget widgetRatedColor=\"rebeccapurple\" widgetDimension='40px' />\n                <Ratings.Widget widgetRatedColor=\"rebeccapurple\" widgetDimension='40px' />\n                <Ratings.Widget widgetRatedColor=\"rebeccapurple\" widgetDimension='40px' />\n                <Ratings.Widget widgetRatedColor=\"rebeccapurple\" widgetDimension='40px' />\n            </Ratings>\n            <h3 style={{ color: 'white' }}>\n                {name} <Badge>{region}</Badge>\n            </h3>\n            <p style={{ color: 'white' }}>How was your experience at House {name}? Others want to know!</p>\n            <div style={{color:'white'}}>Your Review:</div>\n            <Ratings\n                rating={userRating}\n                widgetRatedColors=\"yellow\"\n                changeRating={setUserRating}\n            >\n                <Ratings.Widget />\n                <Ratings.Widget />\n                <Ratings.Widget />\n                <Ratings.Widget />\n                <Ratings.Widget />\n            </Ratings>\n            <AddReview\n                inputVal={inputVal}\n                onChange={(e) => setInputVal(e.target.value)}\n                onSubmit={() => {\n                    if (inputVal.length < 10) { setErrorMessage(\"Your response must be at least ten characters\") } else {\n                        addReview({ variables: { id, body: inputVal, rating:userRating } })\n                        setInputVal(\"\")\n                        setErrorMessage(\"\")\n                        setUserRating(0)\n                    }\n                }}\n                buttonText=\"Submit\"\n            />\n            <p style={{ color: 'red' }}>{errorMessage}</p>\n            <List>\n                {reviews.map((review) => (\n                    <ListItem key={review.id}>\n                        <Ratings\n                            rating={review.rating}\n                            widgetDimensions=\"40px\"\n                            widgetSpacings=\"15px\"\n                        >\n                            <Ratings.Widget widgetRatedColor=\"rebeccapurple\" widgetDimension='25px' />\n                            <Ratings.Widget widgetRatedColor=\"rebeccapurple\" widgetDimension='25px' />\n                            <Ratings.Widget widgetRatedColor=\"rebeccapurple\" widgetDimension='25px' />\n                            <Ratings.Widget widgetRatedColor=\"rebeccapurple\" widgetDimension='25px' />\n                            <Ratings.Widget widgetRatedColor=\"rebeccapurple\" widgetDimension='25px' />\n                        </Ratings>\n                        <br />\n                        {review.body}<br />\n                        <em style={{ color: 'grey' }}>-{timeDifferenceForDate(review.created_at)}</em>\n                    </ListItem>\n                ))}\n            </List>\n            <Link to='/'><Button style={{ margin: '25px 0' }}><i className=\"fas fa-arrow-left\" style={{ marginRight: '2px' }}></i>Go Back</Button></Link>\n        </div>\n    )\n}\n\n\nexport default KingdomLoader;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst LogoText = styled.h1`\n    font-family: 'IM Fell English', serif;\n    font-size: 5rem;\n    color: \tblack;\n    margin: 0;    \n`\n\nconst Logo = () => {\n    return <LogoText>Game of Thrones: Yelp Edition</LogoText>;\n}\n\nexport default Logo;\n","import React from 'react';\nimport Logo from './shared/logo';\nimport Styles from './shared/styles';\nimport Grid from '@material-ui/core/Grid';\nimport {Box} from '@material-ui/core';\nconst image = require('./shared/images/tyrion.png');\n\nconst { intro } = Styles;\n\nconst Intro = () => {\n    return (\n        <Box style={intro}>\n            <Grid container justify=\"center\" alignItems=\"center\">\n                <Grid item xs={12} md={4}>\n                     <Logo />\n                     <p><em> Tyrion demands satisfication!</em></p>\n                </Grid>\n                <Grid item xs={12} md={2}>\n                    <img src={image} alt='angry Tryion' style={{height:'175px'}}/>\n                </Grid>\n            </Grid>\n        </Box>\n    )\n}\n\nexport default Intro;\n\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { ApolloProvider, ApolloClient, HttpLink, InMemoryCache, split } from '@apollo/client';\nimport {getMainDefinition} from '@apollo/client/utilities';\nimport {WebSocketLink} from '@apollo/link-ws';\nimport {BrowserRouter, Switch, Route } from 'react-router-dom';\nimport KingdomSearch from './Components/kingdomSearch';\nimport KingdomLoader from './Components/Kingdom';\nimport Intro from './Components/intro';\nimport './index.css';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Styles from './Components/shared/styles';\n\nconst {kingdom, container, fullscreen} = Styles;\nconst GRAPHQL_ENDPOINT = \"yelp-got.herokuapp.com/v1/graphql\";\n\nconst httpLink = new HttpLink({\n  uri: `https://${GRAPHQL_ENDPOINT}`\n})\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://${GRAPHQL_ENDPOINT}`,\n  options:{\n    reconnect: true\n  }\n})\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' && \n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink,\n);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink\n})\n\nconst App = () => (\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <Box style={fullscreen}>\n        <Intro />\n        <Grid container style={container}>\n          <Grid item sm={12} style={kingdom}>\n            <Switch>\n              <Route path='/kingdom/:id' component={KingdomLoader} />\n              <Route path='/' component={KingdomSearch} />\n            </Switch>\n          </Grid>\n        </Grid>\n      </Box>\n    </ApolloProvider>\n  </BrowserRouter>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}